#!/usr/bin/env ruby

require 'json'
require 'date'
require 'exif'
require 'active_support/all'
require 'digest'

EDITED_SUFFIX = '-edited'
ANIMATION_SUFFIX = '-ANIMATION'
DEFAULT_EXPORT_PATH_PREFIX = 'Unused'

no_metadata_file = []
no_gp_date = []
no_exif_date = []
no_exif_data = []
times_dont_match = []

unless ARGV.length == 3 || ARGV.length == 4
  puts "fix_export scan_path check_exif time_zone [export_path]"
  exit
end

scan_path = ARGV[0]
check_exif = ARGV[1] == 'true'
time_zone = ARGV[2]
export_path = ARGV[3]
Time.zone = time_zone

PHOTO_TYPES = ['jpg', 'heic', 'jpeg', 'png', 'gif']
VIDEO_TYPES = ['mp4', 'm4v', 'mov']
MEDIA_TYPES = PHOTO_TYPES + VIDEO_TYPES

puts 'Reading the scan path.'

# Perform initial analysis on files to be used later.
all_files = Dir.glob("#{scan_path}/*/**").map do |file_path|
  puts "Performing initial analysis for #{file_path}."
  file_name = file_path.split('/').last
  directory = file_path.gsub("#{scan_path}/", "").gsub(file_name, "")
  metadata_file = nil

  file_info = {
    file_path: file_path,
    file_name: file_name,
    file_extension: file_name.split('.').last.downcase,
    directory: directory,
    export_path_prefix: DEFAULT_EXPORT_PATH_PREFIX,
    export_path: directory,
    taken_time: nil
  }
end

# Perform additional checks on the files.
all_files.each do |file_info|
  puts "File info: #{file_info.to_json}"

  file_info[:file_content_hash] = Digest::SHA256.file(file_info[:file_path]).hexdigest

  if MEDIA_TYPES.include?(file_info[:file_extension])
    # The metadata file path can end up in all sorts of weird places.
    metadata_file_paths = []
    metadata_file_paths << "#{scan_path}/#{file_info[:directory]}#{file_info[:file_name]}.json"
    metadata_file_paths << "#{scan_path}/#{file_info[:directory]}#{file_info[:file_name].rpartition('.').first}.json"
    metadata_file_paths << "#{scan_path}/#{file_info[:directory]}#{file_info[:file_name].rpartition('(').first}.#{file_info[:file_extension]}#{file_info[:file_name].rpartition('(')[1..-1].join.split('.').first}.json"
    metadata_file_paths = metadata_file_paths.map { |metadata_path| metadata_path.gsub(EDITED_SUFFIX, '') }

    metadata_file_path = metadata_file_paths.find do |metadata_file_path|
      puts "Checking for metadata file: #{metadata_file_path}"
      File.exist?(metadata_file_path)
    end
    if metadata_file_path
      puts "Loading metadata: #{metadata_file_path}"
      metadata_file = JSON.parse(IO.read(metadata_file_path))
      file_info[:taken_time] = Time.find_zone(time_zone).parse(metadata_file["photoTakenTime"]["formatted"]).in_time_zone(time_zone)

      if file_info[:taken_time]
        puts "Google Photos Date: #{file_info[:taken_time]}"
        file_info[:export_path] = "#{file_info[:taken_time].year}"

        file_info[:export_path_prefix] = if file_info[:file_name].include?(EDITED_SUFFIX)
          'Edited'
        elsif file_info[:file_name].include?(ANIMATION_SUFFIX)
          'Animation'
        else
          'Clean'
        end

        all_files.find { |file| file[:file_path] == metadata_file_path }[:export_path_prefix] = "#{file_info[:export_path_prefix]}/Metadata"
      else
        puts "No GP Date"
        no_gp_date << file_info[:file_path]
      end
    else
      no_metadata_file << file_info[:file_path]
      puts "No metadata file"
    end
  end

  # Check EXIF information lines up - this is informational only
  if check_exif && PHOTO_TYPES.include?(file_info[:file_extension])
    exif_date_format = '%Y:%m:%d %H:%M:%S'
    exif_fields_by_preference = [
      'date_time_original',
      'date_time_digitized',
      'date_time'
    ]

    begin
      exif_data = Exif::Data.new(IO.read(file_info[:file_path]))
    rescue Exif::NotReadable
      puts "Caught EXIF not readable exception - no EXIF data"
      no_exif_data << file_info[:file_path]
    end

    if exif_data
      best_exif_capture_time = exif_fields_by_preference.lazy.map do |field|
        raw_value = exif_data.send(field.to_sym)

        if raw_value
          begin
            parsed_value = Time.zone.local_to_utc(Time.strptime(raw_value, exif_date_format)).in_time_zone(Time.zone)
          rescue ArgumentError
            parsed_value = nil
          end
        else
          parsed_value = nil
        end

        parsed_value
      end.find { |date| !date.nil? }

      if best_exif_capture_time
        puts "EXIF Date: #{best_exif_capture_time}"
      else
        puts "No EXIF Date"
        no_exif_date << file_info[:file_path]
      end
    end

    if best_exif_capture_time && file_info[:taken_time]
      if best_exif_capture_time == file_info[:taken_time]
        puts "Times match"
      else
        puts "Times don't match"
        times_dont_match << file_info[:file_path]
      end
    end
  end

  # Store unused metadata in a different directory.
  if file_info[:file_extension] == 'json' && file_info[:export_path_prefix] == DEFAULT_EXPORT_PATH_PREFIX
    file_info[:export_path_prefix] = 'Unused/Metadata'
  end

  puts
  puts
end

puts "Finished file checks - detecting duplicates..."

# Write duplicate files to a special 'Duplicates' directory with their original paths.
files_by_hash = all_files.group_by { |file| file[:file_content_hash] }
files_by_hash.filter { |hash, files| files.length > 1 }.each do |hash, files|
  duplicate_identifier = files.map { |file| file[:directory].gsub('/', '') }.sort.join(' - ')

  files.each do |file|
    file[:export_path_prefix] = "Duplicate/#{file[:export_path_prefix]}/#{duplicate_identifier}/#{file[:directory]}"
  end
end

# Export data if exports enabled
if export_path
  puts "Writing files..."

  all_files.each do |file_info|
    full_export_directory = "#{export_path}/#{file_info[:export_path_prefix]}/#{file_info[:export_path]}"
    file_export_path = "#{full_export_directory}/#{file_info[:file_name]}"
    FileUtils.mkdir_p(full_export_directory)
    puts "Writing #{file_info[:export_path]}/#{file_info[:file_name]} to '#{file_export_path}'"
    FileUtils.cp(file_info[:file_path], file_export_path)

    if file_info[:taken_time]
      puts "Setting #{file_info[:export_path]}/#{file_info[:file_name]} time to #{file_info[:taken_time].to_time}"
      FileUtils.touch file_export_path, mtime: file_info[:taken_time].to_time
    end
  end
end

outputs = {
  "[Not exported] No Metadata File" => no_metadata_file,
  "[Not exported] No Google Photos Date" => no_gp_date
}

outputs = outputs.merge({
  "[Info] No EXIF Date" => no_exif_date,
  "[Info] No EXIF Data" => no_exif_data,
  "[Info] Times don't match" => times_dont_match
}) if check_exif

outputs.each do |title, file_names|
  puts "=== #{title} ==="
  file_names.each { |file_name| puts "- #{file_name}" }
end

puts "Done"